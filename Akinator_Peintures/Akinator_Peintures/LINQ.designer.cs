#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Akinator_Peintures
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Akina_peintures")]
	public partial class LINQDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Définitions de méthodes d'extensibilité
    partial void OnCreated();
    partial void InsertConnaissance(Connaissance instance);
    partial void UpdateConnaissance(Connaissance instance);
    partial void DeleteConnaissance(Connaissance instance);
    partial void InsertReponse(Reponse instance);
    partial void UpdateReponse(Reponse instance);
    partial void DeleteReponse(Reponse instance);
    partial void InsertQuestion(Question instance);
    partial void UpdateQuestion(Question instance);
    partial void DeleteQuestion(Question instance);
    partial void InsertOeuvre(Oeuvre instance);
    partial void UpdateOeuvre(Oeuvre instance);
    partial void DeleteOeuvre(Oeuvre instance);
    partial void InsertPartie(Partie instance);
    partial void UpdatePartie(Partie instance);
    partial void DeletePartie(Partie instance);
    #endregion
		
		public LINQDataContext() : 
				base(global::Akinator_Peintures.Properties.Settings.Default.Akina_peinturesConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LINQDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Connaissance> Connaissance
		{
			get
			{
				return this.GetTable<Connaissance>();
			}
		}
		
		public System.Data.Linq.Table<Reponse> Reponse
		{
			get
			{
				return this.GetTable<Reponse>();
			}
		}
		
		public System.Data.Linq.Table<Question> Question
		{
			get
			{
				return this.GetTable<Question>();
			}
		}
		
		public System.Data.Linq.Table<Oeuvre> Oeuvre
		{
			get
			{
				return this.GetTable<Oeuvre>();
			}
		}
		
		public System.Data.Linq.Table<Partie> Partie
		{
			get
			{
				return this.GetTable<Partie>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Connaissance")]
	public partial class Connaissance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_C;
		
		private int _ID_Question;
		
		private int _ID_Reponse;
		
		private System.Nullable<int> _ID_Oeuvre;
		
		private EntityRef<Reponse> _Reponse;
		
		private EntityRef<Question> _Question;
		
		private EntityRef<Oeuvre> _Oeuvre;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_CChanging(int value);
    partial void OnID_CChanged();
    partial void OnID_QuestionChanging(int value);
    partial void OnID_QuestionChanged();
    partial void OnID_ReponseChanging(int value);
    partial void OnID_ReponseChanged();
    partial void OnID_OeuvreChanging(System.Nullable<int> value);
    partial void OnID_OeuvreChanged();
    #endregion
		
		public Connaissance()
		{
			this._Reponse = default(EntityRef<Reponse>);
			this._Question = default(EntityRef<Question>);
			this._Oeuvre = default(EntityRef<Oeuvre>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_C", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_C
		{
			get
			{
				return this._ID_C;
			}
			set
			{
				if ((this._ID_C != value))
				{
					this.OnID_CChanging(value);
					this.SendPropertyChanging();
					this._ID_C = value;
					this.SendPropertyChanged("ID_C");
					this.OnID_CChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Question", DbType="Int NOT NULL")]
		public int ID_Question
		{
			get
			{
				return this._ID_Question;
			}
			set
			{
				if ((this._ID_Question != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_QuestionChanging(value);
					this.SendPropertyChanging();
					this._ID_Question = value;
					this.SendPropertyChanged("ID_Question");
					this.OnID_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Reponse", DbType="Int NOT NULL")]
		public int ID_Reponse
		{
			get
			{
				return this._ID_Reponse;
			}
			set
			{
				if ((this._ID_Reponse != value))
				{
					if (this._Reponse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_ReponseChanging(value);
					this.SendPropertyChanging();
					this._ID_Reponse = value;
					this.SendPropertyChanged("ID_Reponse");
					this.OnID_ReponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Oeuvre", DbType="Int")]
		public System.Nullable<int> ID_Oeuvre
		{
			get
			{
				return this._ID_Oeuvre;
			}
			set
			{
				if ((this._ID_Oeuvre != value))
				{
					if (this._Oeuvre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OeuvreChanging(value);
					this.SendPropertyChanging();
					this._ID_Oeuvre = value;
					this.SendPropertyChanged("ID_Oeuvre");
					this.OnID_OeuvreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reponse_Connaissance", Storage="_Reponse", ThisKey="ID_Reponse", OtherKey="ID_R", IsForeignKey=true)]
		public Reponse Reponse
		{
			get
			{
				return this._Reponse.Entity;
			}
			set
			{
				Reponse previousValue = this._Reponse.Entity;
				if (((previousValue != value) 
							|| (this._Reponse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Reponse.Entity = null;
						previousValue.Connaissance.Remove(this);
					}
					this._Reponse.Entity = value;
					if ((value != null))
					{
						value.Connaissance.Add(this);
						this._ID_Reponse = value.ID_R;
					}
					else
					{
						this._ID_Reponse = default(int);
					}
					this.SendPropertyChanged("Reponse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Connaissance", Storage="_Question", ThisKey="ID_Question", OtherKey="ID_Q", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Connaissance.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Connaissance.Add(this);
						this._ID_Question = value.ID_Q;
					}
					else
					{
						this._ID_Question = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oeuvre_Connaissance", Storage="_Oeuvre", ThisKey="ID_Oeuvre", OtherKey="ID_O", IsForeignKey=true)]
		public Oeuvre Oeuvre
		{
			get
			{
				return this._Oeuvre.Entity;
			}
			set
			{
				Oeuvre previousValue = this._Oeuvre.Entity;
				if (((previousValue != value) 
							|| (this._Oeuvre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Oeuvre.Entity = null;
						previousValue.Connaissance.Remove(this);
					}
					this._Oeuvre.Entity = value;
					if ((value != null))
					{
						value.Connaissance.Add(this);
						this._ID_Oeuvre = value.ID_O;
					}
					else
					{
						this._ID_Oeuvre = default(Nullable<int>);
					}
					this.SendPropertyChanged("Oeuvre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Reponse")]
	public partial class Reponse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_R;
		
		private string _Reponse1;
		
		private EntitySet<Connaissance> _Connaissance;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_RChanging(int value);
    partial void OnID_RChanged();
    partial void OnReponse1Changing(string value);
    partial void OnReponse1Changed();
    #endregion
		
		public Reponse()
		{
			this._Connaissance = new EntitySet<Connaissance>(new Action<Connaissance>(this.attach_Connaissance), new Action<Connaissance>(this.detach_Connaissance));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_R", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_R
		{
			get
			{
				return this._ID_R;
			}
			set
			{
				if ((this._ID_R != value))
				{
					this.OnID_RChanging(value);
					this.SendPropertyChanging();
					this._ID_R = value;
					this.SendPropertyChanged("ID_R");
					this.OnID_RChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Reponse", Storage="_Reponse1", DbType="Char(3) NOT NULL", CanBeNull=false)]
		public string Reponse1
		{
			get
			{
				return this._Reponse1;
			}
			set
			{
				if ((this._Reponse1 != value))
				{
					this.OnReponse1Changing(value);
					this.SendPropertyChanging();
					this._Reponse1 = value;
					this.SendPropertyChanged("Reponse1");
					this.OnReponse1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Reponse_Connaissance", Storage="_Connaissance", ThisKey="ID_R", OtherKey="ID_Reponse")]
		public EntitySet<Connaissance> Connaissance
		{
			get
			{
				return this._Connaissance;
			}
			set
			{
				this._Connaissance.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Connaissance(Connaissance entity)
		{
			this.SendPropertyChanging();
			entity.Reponse = this;
		}
		
		private void detach_Connaissance(Connaissance entity)
		{
			this.SendPropertyChanging();
			entity.Reponse = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Question")]
	public partial class Question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_Q;
		
		private string _Libelle;
		
		private string _Type;
		
		private EntitySet<Connaissance> _Connaissance;
		
		private EntitySet<Partie> _Partie;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_QChanging(int value);
    partial void OnID_QChanged();
    partial void OnLibelleChanging(string value);
    partial void OnLibelleChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public Question()
		{
			this._Connaissance = new EntitySet<Connaissance>(new Action<Connaissance>(this.attach_Connaissance), new Action<Connaissance>(this.detach_Connaissance));
			this._Partie = new EntitySet<Partie>(new Action<Partie>(this.attach_Partie), new Action<Partie>(this.detach_Partie));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Q", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_Q
		{
			get
			{
				return this._ID_Q;
			}
			set
			{
				if ((this._ID_Q != value))
				{
					this.OnID_QChanging(value);
					this.SendPropertyChanging();
					this._ID_Q = value;
					this.SendPropertyChanged("ID_Q");
					this.OnID_QChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Libelle", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Libelle
		{
			get
			{
				return this._Libelle;
			}
			set
			{
				if ((this._Libelle != value))
				{
					this.OnLibelleChanging(value);
					this.SendPropertyChanging();
					this._Libelle = value;
					this.SendPropertyChanged("Libelle");
					this.OnLibelleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="Char(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Connaissance", Storage="_Connaissance", ThisKey="ID_Q", OtherKey="ID_Question")]
		public EntitySet<Connaissance> Connaissance
		{
			get
			{
				return this._Connaissance;
			}
			set
			{
				this._Connaissance.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Partie", Storage="_Partie", ThisKey="ID_Q", OtherKey="ID_Question")]
		public EntitySet<Partie> Partie
		{
			get
			{
				return this._Partie;
			}
			set
			{
				this._Partie.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Connaissance(Connaissance entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Connaissance(Connaissance entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
		
		private void attach_Partie(Partie entity)
		{
			this.SendPropertyChanging();
			entity.Question = this;
		}
		
		private void detach_Partie(Partie entity)
		{
			this.SendPropertyChanging();
			entity.Question = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Oeuvre")]
	public partial class Oeuvre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_O;
		
		private string _Nom;
		
		private string _Artiste;
		
		private string _Genre;
		
		private System.Nullable<int> _Occurence;
		
		private System.Nullable<bool> _Flag;
		
		private System.Data.Linq.Binary _Img;
		
		private string _Descriptif;
		
		private EntitySet<Connaissance> _Connaissance;
		
		private EntitySet<Partie> _Partie;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_OChanging(int value);
    partial void OnID_OChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnArtisteChanging(string value);
    partial void OnArtisteChanged();
    partial void OnGenreChanging(string value);
    partial void OnGenreChanged();
    partial void OnOccurenceChanging(System.Nullable<int> value);
    partial void OnOccurenceChanged();
    partial void OnFlagChanging(System.Nullable<bool> value);
    partial void OnFlagChanged();
    partial void OnImgChanging(System.Data.Linq.Binary value);
    partial void OnImgChanged();
    partial void OnDescriptifChanging(string value);
    partial void OnDescriptifChanged();
    #endregion
		
		public Oeuvre()
		{
			this._Connaissance = new EntitySet<Connaissance>(new Action<Connaissance>(this.attach_Connaissance), new Action<Connaissance>(this.detach_Connaissance));
			this._Partie = new EntitySet<Partie>(new Action<Partie>(this.attach_Partie), new Action<Partie>(this.detach_Partie));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_O", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_O
		{
			get
			{
				return this._ID_O;
			}
			set
			{
				if ((this._ID_O != value))
				{
					this.OnID_OChanging(value);
					this.SendPropertyChanging();
					this._ID_O = value;
					this.SendPropertyChanged("ID_O");
					this.OnID_OChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(80) NOT NULL", CanBeNull=false)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Artiste", DbType="VarChar(50)")]
		public string Artiste
		{
			get
			{
				return this._Artiste;
			}
			set
			{
				if ((this._Artiste != value))
				{
					this.OnArtisteChanging(value);
					this.SendPropertyChanging();
					this._Artiste = value;
					this.SendPropertyChanged("Artiste");
					this.OnArtisteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Genre", DbType="VarChar(50)")]
		public string Genre
		{
			get
			{
				return this._Genre;
			}
			set
			{
				if ((this._Genre != value))
				{
					this.OnGenreChanging(value);
					this.SendPropertyChanging();
					this._Genre = value;
					this.SendPropertyChanged("Genre");
					this.OnGenreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Occurence", DbType="Int")]
		public System.Nullable<int> Occurence
		{
			get
			{
				return this._Occurence;
			}
			set
			{
				if ((this._Occurence != value))
				{
					this.OnOccurenceChanging(value);
					this.SendPropertyChanging();
					this._Occurence = value;
					this.SendPropertyChanged("Occurence");
					this.OnOccurenceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag", DbType="Bit")]
		public System.Nullable<bool> Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Img", DbType="Image", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Img
		{
			get
			{
				return this._Img;
			}
			set
			{
				if ((this._Img != value))
				{
					this.OnImgChanging(value);
					this.SendPropertyChanging();
					this._Img = value;
					this.SendPropertyChanged("Img");
					this.OnImgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriptif", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Descriptif
		{
			get
			{
				return this._Descriptif;
			}
			set
			{
				if ((this._Descriptif != value))
				{
					this.OnDescriptifChanging(value);
					this.SendPropertyChanging();
					this._Descriptif = value;
					this.SendPropertyChanged("Descriptif");
					this.OnDescriptifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oeuvre_Connaissance", Storage="_Connaissance", ThisKey="ID_O", OtherKey="ID_Oeuvre")]
		public EntitySet<Connaissance> Connaissance
		{
			get
			{
				return this._Connaissance;
			}
			set
			{
				this._Connaissance.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oeuvre_Partie", Storage="_Partie", ThisKey="ID_O", OtherKey="ID_Oeuvre")]
		public EntitySet<Partie> Partie
		{
			get
			{
				return this._Partie;
			}
			set
			{
				this._Partie.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Connaissance(Connaissance entity)
		{
			this.SendPropertyChanging();
			entity.Oeuvre = this;
		}
		
		private void detach_Connaissance(Connaissance entity)
		{
			this.SendPropertyChanging();
			entity.Oeuvre = null;
		}
		
		private void attach_Partie(Partie entity)
		{
			this.SendPropertyChanging();
			entity.Oeuvre = this;
		}
		
		private void detach_Partie(Partie entity)
		{
			this.SendPropertyChanging();
			entity.Oeuvre = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Partie")]
	public partial class Partie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_P;
		
		private int _ID_Question;
		
		private int _ID_Reponse;
		
		private int _ID_Oeuvre;
		
		private EntityRef<Oeuvre> _Oeuvre;
		
		private EntityRef<Question> _Question;
		
    #region Définitions de méthodes d'extensibilité
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PChanging(int value);
    partial void OnID_PChanged();
    partial void OnID_QuestionChanging(int value);
    partial void OnID_QuestionChanged();
    partial void OnID_ReponseChanging(int value);
    partial void OnID_ReponseChanged();
    partial void OnID_OeuvreChanging(int value);
    partial void OnID_OeuvreChanged();
    #endregion
		
		public Partie()
		{
			this._Oeuvre = default(EntityRef<Oeuvre>);
			this._Question = default(EntityRef<Question>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_P", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID_P
		{
			get
			{
				return this._ID_P;
			}
			set
			{
				if ((this._ID_P != value))
				{
					this.OnID_PChanging(value);
					this.SendPropertyChanging();
					this._ID_P = value;
					this.SendPropertyChanged("ID_P");
					this.OnID_PChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Question", DbType="Int NOT NULL")]
		public int ID_Question
		{
			get
			{
				return this._ID_Question;
			}
			set
			{
				if ((this._ID_Question != value))
				{
					if (this._Question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_QuestionChanging(value);
					this.SendPropertyChanging();
					this._ID_Question = value;
					this.SendPropertyChanged("ID_Question");
					this.OnID_QuestionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Reponse", DbType="Int NOT NULL")]
		public int ID_Reponse
		{
			get
			{
				return this._ID_Reponse;
			}
			set
			{
				if ((this._ID_Reponse != value))
				{
					this.OnID_ReponseChanging(value);
					this.SendPropertyChanging();
					this._ID_Reponse = value;
					this.SendPropertyChanged("ID_Reponse");
					this.OnID_ReponseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID_Oeuvre", DbType="Int NOT NULL")]
		public int ID_Oeuvre
		{
			get
			{
				return this._ID_Oeuvre;
			}
			set
			{
				if ((this._ID_Oeuvre != value))
				{
					if (this._Oeuvre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnID_OeuvreChanging(value);
					this.SendPropertyChanging();
					this._ID_Oeuvre = value;
					this.SendPropertyChanged("ID_Oeuvre");
					this.OnID_OeuvreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Oeuvre_Partie", Storage="_Oeuvre", ThisKey="ID_Oeuvre", OtherKey="ID_O", IsForeignKey=true)]
		public Oeuvre Oeuvre
		{
			get
			{
				return this._Oeuvre.Entity;
			}
			set
			{
				Oeuvre previousValue = this._Oeuvre.Entity;
				if (((previousValue != value) 
							|| (this._Oeuvre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Oeuvre.Entity = null;
						previousValue.Partie.Remove(this);
					}
					this._Oeuvre.Entity = value;
					if ((value != null))
					{
						value.Partie.Add(this);
						this._ID_Oeuvre = value.ID_O;
					}
					else
					{
						this._ID_Oeuvre = default(int);
					}
					this.SendPropertyChanged("Oeuvre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Question_Partie", Storage="_Question", ThisKey="ID_Question", OtherKey="ID_Q", IsForeignKey=true)]
		public Question Question
		{
			get
			{
				return this._Question.Entity;
			}
			set
			{
				Question previousValue = this._Question.Entity;
				if (((previousValue != value) 
							|| (this._Question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Question.Entity = null;
						previousValue.Partie.Remove(this);
					}
					this._Question.Entity = value;
					if ((value != null))
					{
						value.Partie.Add(this);
						this._ID_Question = value.ID_Q;
					}
					else
					{
						this._ID_Question = default(int);
					}
					this.SendPropertyChanged("Question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
